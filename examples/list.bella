let
  mylist =
    [1, 2, 3, 4, 5, 6, 7, 8, 9]

  map =
    list -> fn ->
      match list
        is [] then []
        is [first | rest] then
          [fn(first)] + map(rest, fn)

  fold =
    list -> acc -> fn ->
      match list
        is [] then acc
        is [first | rest] then
          fold(rest, fn(first, acc), fn)

  reduce =
    list -> fn ->
      let [first | rest] = list in
      fold(rest, first, fn)
in
(
  ; Squares
  map(mylist, x -> x * x) |> Io.println

  ; Sum
  reduce(mylist, x -> a -> x + a) |> Io.println

  ; Length
  fold(mylist, 0, x -> a -> a + 1) |> Io.println
)
