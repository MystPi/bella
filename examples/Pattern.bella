; Tools for pattern matching
;
; ```bella
; import Pattern as P
;
; ["add", 2, 7]
; |> P.list([
;   P.either(
;     P.lit("add"),
;     P.lit("sub")
;   ),
;   P.number,
;   P.number
; ])
; |> Io.println
; ```

let
  Match =
    matched ->
      if (matched)
        value ->
          { matched
          , value
          }
      else
        { matched }

  ; Matches a given literal value
  lit =
    target -> x ->
      if (x == target)
        Match(true, x)
      else
        Match(false)

  ; Matches any value
  any =
    x ->
      Match(true, x)

  ; Matches a value of the given type
  is_type =
    type -> x ->
      if (Types.typeof(x) == type)
        Match(true, x)
      else
        Match(false)

  ; Matches any string
  string = is_type("string")

  ; Matches any number
  number = is_type("number")

  ; Attempts to match either the first pattern or the second one
  either =
    a -> b -> x ->
      let a = a(x) in

      if (a.matched) a else b(x)

  list_ =
    values -> patns -> x ->
      if (patns == [] and x == [])
        Match(true, values)

      else if (patns == [] or x == [])
        Match(false)

      else
        let
          first_pat = List.first(patns)
          first_val = List.first(x)
          match = first_pat(first_val)
        in

        if (match.matched)
          list_(values + [match.value], List.rest(patns), List.rest(x))
        else
          Match(false)

  ; Matches a list of patterns
  list = list_([])

  ; Asserts that a value matches the given pattern
  assert =
    pattern -> x ->
      let match = pattern(x) in

      if (match.matched)
        match
      else
        throw 'Value `' + Types.to_string(x) + '` did not match the given pattern'
in

let
  test =
    x ->
      let
        pattern =
          list([
            either(
              lit("add"),
              lit("sub")
            ),
            number,
            number
          ])
      in

      Io.println(x |> assert(pattern))
in

; { lit
; , any
; , is_type
; , string
; , number
; , either
; , list
; }
(
  ["add", 1, 2] |> test
  ["sub", 1, 3] |> test
  ["add", 1, "2"] |> test
  ["add", 1, 2, 3] |> test
)